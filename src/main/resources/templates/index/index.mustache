<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8"/>
    <title>Index Page</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
          rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
</head>
<body class="d-flex align-items-center justify-content-center" style="height: 100vh; background-color: #f8f9fa;">
<div class="card shadow-sm" style="width: 300px;">
    <div class="card-body text-center">
        <h5 class="card-title">Index Page</h5>
        <hr/>
        <div id="content">
            <!-- 여기에 동적으로 내용이 추가됩니다 -->
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', indexLoginCheck);

    let timerInterval;  // 타이머 인터벌을 전역에서 참조 가능하게 설정

    function indexLoginCheck() {

        const accessToken = localStorage.getItem('accessToken');
        const contentDiv = document.getElementById('content');

        if (!accessToken) {
            // accessToken이 없을 때 로그인 페이지로 이동하는 버튼 제공
            contentDiv.innerHTML = `
                <p>로그인이 필요합니다.</p>
                <button type="button" class="btn btn-primary w-100" onclick="redirectToLogin()">Login</button>
            `;
        } else {
            // accessToken이 있을 때 사용자 정보를 가져옴
            fetch('/api/v1/user/test', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + accessToken,
                    'Content-Type': 'application/json'
                }
            })
                    .then(response => {
                        if (response.ok) {
                            return response.text();
                        } else if (response.status === 401) {
                            // 토큰 만료 시 처리
                            return response.text().then((errorMessage) => {
                                localStorage.clear();
                                throw new Error(errorMessage); // 서버에서 반환한 메시지를 에러로 던짐
                            });
                        } else {
                            throw new Error('로그인이 필요합니다.');
                        }
                    })
                    .then(data => {
                        contentDiv.innerHTML = `<p>환영합니다, ${data}님!</p>
                            <p id="timer">30:00</p>
                            <button type="button" class="btn btn-warning w-100" onclick="logout()">Logout</button>
                            <button type="button" class="btn btn-success mt-2 w-100" onclick="updateAccessToken()">연장</button>
                        `;

                        // 타이머 업데이트 시작
                        initializeTimer();
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        // 에러 메시지와 로그인 버튼 표시
                        contentDiv.innerHTML = `
                            <p>${error.message}</p>
                            <button type="button" class="btn btn-primary w-100" onclick="redirectToLogin()">Login</button>
                        `;
                    });
        }
    }

    function redirectToLogin() {
        window.location.href = '/login'; // 로그인 페이지로 리다이렉트
    }

    function logout() {
        const accessToken = localStorage.getItem('accessToken');
        fetch('/api/v1/user/logout', {
            method: 'GET',
            headers: {
                'Authorization': 'Bearer ' + accessToken,
                'Content-Type': 'application/json'
            }
        })
                .then(response => {
                    if (response.ok) {
                        return response.text();
                    } else {
                        throw new Error('로그아웃 실패');
                    }
                })
                .then(data => {
                    if (data) {
                        alert("로그아웃되었습니다.");
                        localStorage.clear();
                        indexLoginCheck();
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
    }

    function updateAccessToken() {
        const accessToken = localStorage.getItem('accessToken');
        const refreshToken = localStorage.getItem('refreshToken');
        fetch('/api/v1/user/refreshtoken', {
            method: 'GET',
            headers: {
                'Authorization': 'Bearer ' + accessToken,
                'Refresh-Token': refreshToken,
                'Content-Type': 'application/json'
            }
        })
                .then(response => {
                    if (response.ok) {
                        return response.json();  // JSON 응답으로 받는다고 가정
                    } else {
                        throw new Error('토큰 갱신 실패');
                    }
                })
                .then(data => {
                    if (data) {
                        localStorage.setItem('accessToken', data.accessToken);
                        alert("토큰이 갱신되었습니다.");

                        // 새로운 만료 시간에 맞춰 타이머 재설정
                        initializeTimer();
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
    }

    function initializeTimer() {
        clearInterval(timerInterval);  // 이전 타이머 중지

        const token = localStorage.getItem('accessToken');
        if (!token) return;

        const base64Url = token.split('.')[1];
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        const jsonPayload = JSON.parse(atob(base64));

        // 만료 시간 (exp)은 유닉스 타임스탬프이므로 밀리초로 변환
        const expirationTime = jsonPayload.exp * 1000;

        function updateTimer() {
            const currentTime = new Date().getTime();
            const timeLeft = expirationTime - currentTime;

            if (timeLeft <= 0) {
                document.getElementById('timer').textContent = '토큰이 만료되었습니다.';
                clearInterval(timerInterval);  // 타이머 중지
                return;
            }

            // 남은 시간 계산 (분, 초)
            const minutes = Math.floor(timeLeft / (1000 * 60));
            const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

            // 남은 시간을 화면에 표시 (MM:SS 형식)
            document.getElementById('timer').textContent = `${minutes}:${seconds < 10 ? '0' + seconds : seconds}`;
        }

        // 1초마다 updateTimer 실행
        timerInterval = setInterval(updateTimer, 1000);

        // 페이지가 처음 로드될 때 타이머를 즉시 업데이트
        updateTimer();
    }
</script>
</body>
</html>
