<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8"/>
    <title>Index Page</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
          rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
</head>
<body class="d-flex align-items-center justify-content-center" style="height: 100vh; background-color: #f8f9fa;">
<div class="card shadow-sm" style="width: 300px;">
    <div class="card-body text-center">
        <h5 class="card-title">Index Page</h5>
        <hr/>
        <div id="content">
            <!-- 여기에 동적으로 내용이 추가됩니다 -->
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', indexLoginCheck);

    function indexLoginCheck() {

        const accessToken = localStorage.getItem('accessToken');
        const contentDiv = document.getElementById('content');

        if (!accessToken) {
            // accessToken이 없을 때 로그인 페이지로 이동하는 버튼 제공
            contentDiv.innerHTML = `
                <p>로그인이 필요합니다.</p>
                <button type="button" class="btn btn-primary w-100" onclick="redirectToLogin()">Login</button>
            `;
        } else {
            // accessToken이 있을 때 사용자 정보를 가져옴
            fetch('/api/v1/user/test', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + accessToken,
                    'Content-Type': 'application/json'
                }
            })
                    .then(response => {
                        if (response.ok) {
                            return response.text();
                        } else {
                            throw new Error('로그인이 필요합니다.');
                        }
                    })
                    .then(data => {
                        contentDiv.innerHTML = `<p>환영합니다, ${data}님!</p>
                        <p id="timer">30:00</p>
                        <button type="button" class="btn btn-warning w-100" onclick="logout()">Logout</button>`;
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        // 오류 발생 시 로그인 페이지로 이동하는 버튼 제공
                        contentDiv.innerHTML = `
                    <p>${error.message}</p>
                    <button type="button" class="btn btn-primary w-100" onclick="redirectToLogin()">Login</button>
                `;
                    });
        }
    }

    function redirectToLogin() {
        window.location.href = '/login'; // 로그인 페이지로 리다이렉트
    }

    function logout() {
        const accessToken = localStorage.getItem('accessToken');
        fetch('/api/v1/user/logout', {
            method: 'GET',
            headers: {
                'Authorization': 'Bearer ' + accessToken,
                'Content-Type': 'application/json'
            }
        })
                .then(response => {
                    if (response.ok) {
                        return response.text();
                    } else {
                        throw new Error('로그아웃 실패');
                    }
                })
                .then(data => {
                    if(data) {
                        alert("로그아웃");
                        localStorage.clear();
                        indexLoginCheck();
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
    }

    // JWT 토큰 (이 예시에서는 이미 유효한 JWT 토큰이 있다고 가정)
    const token = localStorage.getItem('accessToken');  // 서버에서 전달된 JWT 토큰 (Mustache 사용 예시)

    // JWT 토큰에서 만료 시간 추출
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const jsonPayload = JSON.parse(atob(base64));

    // 만료 시간 (exp)은 유닉스 타임스탬프이므로 밀리초로 변환
    const expirationTime = jsonPayload.exp * 1000;

    function updateTimer() {
        const currentTime = new Date().getTime();
        const timeLeft = expirationTime - currentTime;

        // 만료 시간이 지난 경우
        if (timeLeft <= 0) {
            document.getElementById('timer').textContent = '토큰이 만료되었습니다.';
            clearInterval(timerInterval); // 타이머 중지
            return;
        }

        // 남은 시간 계산 (분, 초)
        const minutes = Math.floor(timeLeft / (1000 * 60));
        const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

        // 남은 시간을 화면에 표시 (MM:SS 형식)
        document.getElementById('timer').textContent = `${minutes}:${seconds < 10 ? '0' + seconds : seconds}`;
    }

    // 1초마다 updateTimer 실행
    const timerInterval = setInterval(updateTimer, 1000);

    // 페이지가 처음 로드될 때 타이머를 즉시 업데이트
    updateTimer();
</script>
</body>
</html>
